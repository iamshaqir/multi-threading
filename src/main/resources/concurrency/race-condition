Race Condition:
-------------------------
When multiple threads trying to perform same operation on a shared resource/object and attempt to modify it
concurrently, race condition occurs which results in inconsistent data. It happens because of Timing and sequence
of thread execution.

In this example in DownloadStatus class we have a property totalBytes, which is non-atomic and there are 10 Threads in
ThreadDemo class trying to increment totalBytes, which is causing Race condition.

There are three steps are happening Under the hood,
1. Value is fetched from main memory and stored into CPU.
2. CPU will perform the increment operation.
3. Then update value is stored in main memory.

All this operations are non-atomic.

Strategies for Thread safe code:
----------------------------------------
1. Confinement: Instead of sharing data across multiple threads, hava an individual object for each thread and
combine them after performing the operation.
2. Immutability: Sharing immutable object across all threads.
3. Syncronization: Using synchronized keyword on write operation happens. While using synchronized keyword
    remember to use it in a block rather than on a method signature, consider a case where you have to perform write
    operation for two properties in a single class, synchronized keyword on method signature will allow only one method
    to perform the operation, see the example in synchronization package. Use Dedicated monitor objects.
4. Atomic Objects: Using Inbuilt Atomic Objects.
5. Partitioning: Using concurrent collection objects.